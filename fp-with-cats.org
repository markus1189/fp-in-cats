* Prelude
#+BEGIN_SRC elisp
(define-minor-mode org-presentation-mode
  "Toggle org presentation mode."
  :init-value nil
  :lighter: " P"
  :group 'org-pres)

(defvar org-presentation-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "<prior> <prior>") 'org-presentation-prev)
    (define-key map (kbd "<next> <next>") 'org-presentation-next)
    (define-key map (kbd "<prior> <next> <next>") (Λ (org-next-block 1)
                                                     (recenter-top-bottom 0)
                                                     (message "Evaluating...")
                                                     (org-ctrl-c-ctrl-c)
                                                     (message "done!")
                                                     (org-display-inline-images)))
    (define-key map (kbd "<next> <prior> <prior>") 'org-previous-block)
    (define-key map (kbd "q") (Λ (org-presentation-mode -1)
                                 (text-scale-set 0)))
    map))

(defun org-presentation-next (arg)
  (interactive "p")
  (progn
    (widen)
    (org-next-visible-heading arg)
    (org-narrow-to-subtree)))

(defun org-presentation-prev (arg)
  (interactive "p")
  (progn
    (widen)
    (org-previous-visible-heading arg)
    (org-narrow-to-subtree)))

(flyspell-mode nil)
(org-babel-remove-result-one-or-many '(4))
(org-cycle '(64))
(setq org-confirm-babel-evaluate nil)
(text-scale-set 5)
(org-display-inline-images)
(blink-cursor-mode -1)
(org-presentation-mode)
#+END_SRC

#+RESULTS:
: t


* This evening at Scala User Group Köln Bonn:
#+BEGIN_SRC elisp
(play-sound-file-async "sounds/intro.mp3")
(sit-for 5.5)
(play-sound-file-async "sounds/intro2.mp3")
(shell-command-to-string "figlet -d fonts -f doom -w 70 -c -k \"FP with cats\"")
#+END_SRC


* First off, the bad news

  Not about those cats:

    [[file:pics/cats-dressed-vintage-photo_small_xed.jpg]]

    [[http://www.publicdomainpictures.net/view-image.php?image=76025&picture=cats-dressed-vintage-photo][source]]

* Check for some basic understanding

-> Who knows about

 -> free adjoint functors?
 -> star-autonomous categories?
 -> geometric morphisms?

* Functional Programming != scary

Good! You don't need them anyway.

¯\_(ツ)_/¯

* Some technicality before we start

(I have to eval this for rest of examples)

#+BEGIN_SRC scala
import scala.concurrent._
import scala.concurrent.duration._
import scala.concurrent.ExecutionContext.Implicits.global
import cats._, cats.kernel._, cats.data._, cats.implicits._, cats.syntax.all._
import scala.util.Try

println("All set, let's go!")
#+END_SRC


* What is 'cats'

#+BEGIN_QUOTE
Lightweight, modular, and extensible library for functional programming.
#+END_QUOTE

 - 0.6.0 currently released, 1.0 is not far (ETA: Q3 2016)
 - Github: https://github.com/typelevel/cats
 - Guide: http://typelevel.org/cats/
 - Scaladoc: http://typelevel.org/cats/api/#package

* Plan for today

- spot some patterns
- raise level of abstraction with cats
- overview over cats' package structure
- some pitfalls when starting
- cats vs Scalaz

- repository: http://github.com/markus1189/fp-with-cats

* Combining stuff (Monoid)

Can you spot a pattern here?

#+BEGIN_SRC scala
val add = (0       + 1      )  + 5
val mul = (1       * 2      )  * 5
val cat = (List() ++ List(1)) ++ List(2,3)
#+END_SRC


* Abstracting with Monoids

#+BEGIN_SRC scala
def empty1: Int = 0
def empty2: Int = 1
def empty3: List[Int] = List()

val add = (empty1 |+| 1      ) |+| 5
val mul = (empty2 |+| 2      ) |+| 5
val mul = (empty3 |+| List(1)) |+| List(2,3)
#+END_SRC

The general structure of the computation is the same!

* Definition of Monoids

The Monoid type class:

#+BEGIN_SRC scala
trait Monoid[A] {
  def empty: A

  def combine(x: A, y: A): A
}

implicit class MonoidOps[A](val self: A) {
  def +|+(other: A)(implicit M: Monoid[A]) = M.combine(self,other)
}
#+END_SRC


* Monoid Rules

Implementations have to obey some rules:

#+BEGIN_EXAMPLE

1) empty |+| x === x

2) x |+| empty === x

3) (x |+| y) |+| z === x |+| (y |+| z)

#+END_EXAMPLE

* Let's define some Monoids

1) Addition
2) Multiplication
3) List concatenation

#+BEGIN_SRC scala
implicit val intPlus: Monoid[Int] = new Monoid[Int] {
  override def empty: Int = ???
  override def combine(x: Int, y: Int): Int = ???
}

1 +|+ 41
#+END_SRC

#+BEGIN_SRC scala
implicit val doubleMul: Monoid[Double] = new Monoid[Double] {
  override def empty: Double = ???
  override def combine(x: Double, y: Double): Double = ???
}

8.0 +|+ 5.25
#+END_SRC

#+BEGIN_SRC scala
implicit def listConcat[A]: Monoid[List[A]] = new Monoid[List[A]] {
  override def empty: List[A] = ???
  override def combine(x: List[A], y: List[A]): List[A] = ???
}

List(1,2,3) +|+ List(4,5,6)
#+END_SRC


* Monoids can be combined

We can build monoids from monoids:

#+BEGIN_SRC scala
implicit def option[A:Monoid] = new Monoid[Option[A]] {
  def empty = None

  def combine(x: Option[A], y: Option[A]) = (x,y) match {
    case (Some(xx),Some(yy)) => Some(xx +|+ yy)
    case (Some(xx),None) => Some(xx)
    case (None,Some(yy)) => Some(yy)
    case (None,None) => None
  }
}
#+END_SRC

#+BEGIN_SRC scala
val none: Option[Int] = None
Option(2) +|+ Option(40)
Option(8.0) +|+ Option(5.25)
Option(List(1,2,3)) +|+ Option(List(0))
Option(1) +|+ none
none +|+ Option(42)
none +|+ none
#+END_SRC


* Monoids everywhere

#+BEGIN_SRC scala
1 |+| 2
Await.result(Future("a") |+| Future("b"), Duration.Inf)
Option("Hello, ") |+| Option("World")
Map(1->List('a','b')) |+| Map(1->List('c'),2->List())
#+END_SRC

Also:

  - ~Order[A]~
  - ~Either[A,B]~ if Monoid[B]
  - ~A => B~      if Monoid[B]
  - ~Map[A,B]~    if Monoid[B]
  - ~(A,B)~       if Monoid[A] and Monoid[B]

* Functions for monoids

- cats also defines many other functions for monoids
  - specialized ~fold~ with start and combine function
  - Validated (error accumulation)
  - and many more

- at this point you might be thinking:

* Monoids for the real world

         [[file:pics/skeptical.jpg]]

* Apache Spark

Task: calculate statistics with Apache Spark

  a) number of words
  b) word count per word
  c) average word length
  +) make it easy to extend

Easy? Only do *one* traversal over the input

(back to cats)

* But before, let's talk about cats

    [[file:pics/cat_appears.jpg]]

    [[https://www.flickr.com/photos/wapiko57/6514540899/in/photolist-aVEJ3F-ar1fEN-q83znw-9LQPij-6oEGix-6zsGDL-Rw6yd-9xw6Ho-qTG9ni-aqXAKH-8GeWbL-owVkdM-d55j3Y-9x45Vn-uYQ2H-8zgM7V-nEt2nr-96GYDJ-5aeKFN-97uBZ7-65fjVh-fNpw7f-9yMddK-uYQ9N-aQEhqt-6iwBTH-JWEQ-egs32z-4DTznL-cgE8rJ-7xfjz1-85Cihv-96DW6n-8tkTfR-dJNGUc-e5Nk39-4qfFXo-21pAT-4SxWCr-pbNEGz-nXsMRD-ajyAM1-7Xdggt-b5nAkp-4WHNSC-4WDvkp-eeDNhC-kUgwo-4vcd6o-a9mSXv][source]]

* Cats, a library for FP in Scala

- cats defines a lot of things
- organization is confusing at first
  - but obvious after learning some rules

=> let's take a look

* General structure of packages in cats

| package           | contains                     | examples            |
|-------------------+------------------------------+---------------------|
| ~cats~            | type classes                 | Functor,Monoid      |
| ~cats.kernel~     | essential type classes       | Eq, Ordering        |
| ~cats.std~        | instances for standard Scala | List,Vector,Tuple   |
| ~cats.kernel.std~ | instances for standard Scala | List,Vector,Tuple   |
| ~cats.data~       | data types                   | Xor,Validated       |
| ~cats.syntax~     | /optional/ syntactic sugar   | combine, <any>.void |

* Imports: à la carte or the whole menu
#+BEGIN_SRC dot :file packages.png :cmdline -Tpng -Nfontsize=18
digraph {
rankdir=LR;
catsImplicits [label="cats.implicits"];

catsStdAll [label="cats.std.all"];
{ rank=same;
  catsStdFuture [label="cats.std.future"];
  catsStdOption [label="cats.std.option"];
  catsStdElse [label="cats.std.<...>"];
}

catsSyntaxAll [label="cats.syntax.all"];
{ rank=same;
  catsSyntaxTraverse [label="cats.syntax.traverse"];
  catsSyntaxSemigroup [label="cats.syntax.semigroup"];
  catsSyntaxElse [label="cats.syntax.<...>"];
}

catsImplicits -> catsStdAll;
catsImplicits -> catsSyntaxAll;

catsStdAll -> catsStdFuture;
catsStdAll -> catsStdOption;
catsStdAll -> catsStdElse;

catsSyntaxAll -> catsSyntaxTraverse;
catsSyntaxAll -> catsSyntaxSemigroup;
catsSyntaxAll -> catsSyntaxElse;
}
#+END_SRC

1) Import /everything/: ~import cats.implicits._~
2) Import /packages/:   ~import cats.<...>.all._~
3) Import /à la carte/: ~import cats.std.future._~

* It's up to you

#+BEGIN_SRC scala
import cats.implicits._

(1,List("a")) |+| (2,List("b"))
#+END_SRC

 VS

#+BEGIN_SRC scala
import cats.syntax.semigroup._
import cats.std.tuple._
import cats.std.list._

(List(1),List("a")) |+| (List(2),List("b"))
#+END_SRC

(you have to know where to find it though)

* Having fine grained imports

  [[file:pics/modular.jpeg]]

* Where to find it

 1) typeclass (Monoid,Ordering)
   -> ~cats~,
      or ~cats.kernel~

 2) instances (e.g. Monoid for xyz)
   -> ~cats.std.<...>~,
      or ~cats.kernel.std.<...>~

 3) operators and extension methods (|+|, *>, >>=, <any>.void)
   -> ~cats.syntax.<...>~

 4) data structures (Xor, Validated)
   -> ~cats.data~


* Middle ground for imports with package objects

package object
  + some explicit imports
  + chained package clauses

#+BEGIN_SRC scala
package de
package object codecentric extends CatsPkg

trait CatsPkg
  extends FutureInstances
  with ListInstances
  with SemigroupSyntax
  // with ...
#+END_SRC

#+BEGIN_SRC scala
package de
package codecentric

import cats.syntax.group._
#+END_SRC

* Using apply vs syntax

- use typeclass explicitly
- or import the provided syntax "magic"

#+BEGIN_SRC scala
Monoid[Int].combine(21,21)
Functor[Option].map(Option(1))(_+1)

// vs

21 |+| 21
Option(1).map(_+1)
#+END_SRC

mostly up to you, first one is more explicit
DISCLAIMER: pitfalls apply (later)

* Apache Spark - Using Monoids

#+BEGIN_SRC scala
// Monoid for Map, Option & Integer addition

def step(word: String) = (1,Map(word->1),word.length)

val data = sc.textFile(file).flatMap(_.split("""\s+""")).map(step)

val z = Monoid.empty[(Int,Map[String,Int],Int)]

val (words,wordCount,chars) = data.fold(z)(_ |+| _)
val averageWordLength = chars / words
#+END_SRC

#+BEGIN_EXAMPLE
1) "FP in cats in cologne"

2) List("FP","in","cats","in","cologne")

3) List((1,Map("FP"->1),2),(1,Map("in"->1),2),
        (1,Map("cats"->1),4),(1,Map("in"->1),2), ...)

4) (5,Map("FP"->1,"in"->2,"cats"->1,...),17)
#+END_EXAMPLE

Remember the requirement: /easy/ extension!
Let's also calculate maximum word length
* Apache Spark - Extension: Max word length

#+BEGIN_SRC scala
// define Monoid instance for Max

def step(word: String) =
  (1,Map(word->1),word.length,Option(Max(word.length)))

val data = sc.textFile(file).flatMap(_.split("""\s+""")).map(step)

val z = Monoid.empty[(Int,Map[String,Int],Int,Option[Max[Int]])]

val (words,wordCount,chars,max) = data.fold(z)(_ |+| _)
val averageWordLength = chars / words
#+END_SRC

(okay back to cats)

* From Apache Spark back to cats

    [[file:pics/cat_appears2.jpg]]

    [[https://www.flickr.com/photos/wapiko57/6485554303/in/photolist-aT7akM-5rjoU-aqXABF-5EY2CH-Ei9g6L-7CJLZB-dw5ubE-4WU9CM-9c8DxY-mJacdB-7CNDjJ-DLYJJ4-4UqYjw-queHDF-DBBweh-4WHPqW-fHFKMq-e4LY68-Deyhdx-Deyhzz-6j8y5z-apVto4-dTJt5S-nPofCV-5k9icV-5RWdiH-dGc58F-dGhsHf-6hTmrR-9x75ih-aVEwEH-pGyf51-g8fzC-c2Qzeo-d55Dz3-hDVqdM-ehMkwT-bErmXo-apY92G-apVrgH-cpQvZ-5kCxD9-95uTJS-9Kwe3v-j17GZ-njVWkm-Deyemv-apVuSt-6jcJZW-9eDEkS][source]]

* Spot the pattern (round 2)

#+BEGIN_SRC scala
def parse(s: String): Option[Int] = Try(s.toInt).toOption

def add1(i: Int): Option[Int] = Some(i+1)

def positive(i: Int): Option[Boolean] = Some(i > 0)

for {
  parsed <- parse("42")
  added  <- add1(parsed)
  result <- positive(added)
} yield result
#+END_SRC

So far, so good

* Let's use Futures

#+BEGIN_SRC scala
def parse(s: String): Future[Option[Int]] =
  Future.successful(Try(s.toInt).toOption)

def add1(i: Int): Future[Option[Int]] =
  Future.successful(Some(i+1))

def positive(i: Int): Future[Option[Boolean]] =
  Future.successful(Some(i > 0))

parse("42").flatMap {
  case None => Future.successful(None)
  case Some(int) => add1(int).flatMap {
    case None => Future.successful(None)
    case Some(int) => positive(int)
  }
}
#+END_SRC


* That is not nice :(

-> Can you spot a pattern:

#+BEGIN_SRC scala
parse("42").map(_.map(x => add1(x).map(_.map(positive))))
// Future[Option[Future[Option[Future[Option[Boolean]]]]]]
#+END_SRC

* Cats to the rescue

- There is a pattern: ~F[G[F[G[F[G[...]]]]]]~
- Idea:

#+BEGIN_SRC scala
type H[A] = F[G[A]]
#+END_SRC

- So our type becomes ~H[H[H[...]]]~
- Now we just have to flatten

* For-comprehension-ability restored \o/

#+BEGIN_SRC scala
def transform[A]: Future[Option[A]] => H[A] = ???
val success = (for {
  parsed <- transform(parse("42"))
  added  <- transform(add1(parsed))
  result <- transform(positive(added))
} yield result).value
#+END_SRC


* Warm fuzzy things
- known as [[https://www.urbandictionary.com/define.php?term=Warm%2520Fuzzy%2520Thing][warm fuzzy thing]] Transformers
- think: make for-comprehension work and reduce boilerplate
- ~xyzT~ = wrapping values of ~F[xyz[A]]~ for any F

- in our case: ~Future[Option[Future[Option[...]]]]~
- ~OptionT~ = wrap ~F[Option[A]]~, F above is Future
   - also: ~List[Option[A]]~, ~Xor[String,Option[A]]~, ...
- ~XorT~ => like ~OptionT~ but for ~Xor~
* Spot the pattern 3: flip it

- often we want to "flip" type constructors:

#+BEGIN_SRC scala
val listOpt      : List[Future[String]]       = List(Future("a"),Future("b"))
val optFuture    : Option[Future[Int]]        = Some(Future(1))
val eitherFuture : Either[String,Future[Int]] = Right(Future(1))
#+END_SRC

- flip inner and outer, e.g. ~Future~ on the outside
=> any ideas?

* What we want to do

#+BEGIN_EXAMPLE

For any type A:

      F [ G [ A ] ] <=> G [ F [ A ] ]
      ^   ^             ^    ^
      |   |             |    |
      +---|-------------|----+
          +-------------+


#+END_EXAMPLE

* Why only Future?

- Scala defines ~traverse~ and ~sequence~ for ~Future~
- ~Future.traverse~
- how is ~Future~ more special than ~List~, ~Option~ etc?

* Turns out it is not

- cats defines the ~Traverse~ typeclass (~traverse~ & ~sequence~)
- ~fa.traverse(f)~ === ~fa.map(f).sequence~

#+BEGIN_SRC scala
List(Future("a"),Future("b")).sequence
Option(Future(1)).sequence
eitherFuture.sequenceU
List(1,2,3).traverse(x => Option(x))
type MapInt[A] = Map[Int,A]
val map: MapInt[String] = Map(1 -> "one", 2 -> "two")
map.traverseU(x => Future(x))
#+END_SRC


* Pitfalls

- there are some subtle issues when starting with cats
- we are going to look at some pitfalls
- some are IntelliJ related, other specific to Scala

* Cats can't find the instance

#+BEGIN_SRC scala
import cats.std.future._
import cats.Functor
import scala.concurrent.Future
Functor[Future].map(Future.successful("42"))(_.toInt)
#+END_SRC

#+BEGIN_EXAMPLE
Error:(6, 9) could not find implicit value for parameter instance: cats.Functor[scala.concurrent.Future]
Functor[Future].map(Future.successful("42"))(_.toInt)
       ^
#+END_EXAMPLE

* Use the source, Luke

#+BEGIN_SRC scala
// in cats.std.future:
trait FutureInstances {
  implicit def catsStdInstancesForFuture(implicit ec: ExecutionContext) = ???
}
#+END_SRC

#+BEGIN_SRC scala
import cats.std.future._
import cats.Functor
import scala.concurrent.Future
import scala.concurrent.ExecutionContext.Implicits.global
Functor[Future].map(Future.successful("42"))(_.toInt)
#+END_SRC


* IntelliJ not smart enough

#+BEGIN_SRC scala
val either: Either[String,Future[Int]] = Right(Future(1))
either.sequenceU
#+END_SRC


* More verbosity to the rescue

#+BEGIN_SRC scala
val either = Right(Future(1))
Traverse[λ[A=>Either[String,A]]].sequence(either)
#+END_SRC

* Cats vs Scalaz

SPOILER: it depends ¯\_(ツ)_/¯

Scalaz:
  - battle tested
  - huge, defines everything you may want
  - concurrency, data structures, zipper etc
  - Task, streams, lenses, argonaut, tagged instances

Cats:
  - young, lessons learned from Scalaz
  - modularity (kernel, core, free, ...)
  - focused on typeclasses and instances
  - less data structures (~dogs~ not yet there)
  - wants to be very community friendly
  - not yet stable (but almost!)
  - circe as an alternative to argonaut

soon: fs2 will support both cats and Scalaz

* The end

#+BEGIN_SRC elisp
(play-sound-file-async "sounds/intro.mp3")
(sit-for 5.5)
(play-sound-file-async "sounds/intro2.mp3")
(shell-command-to-string "figlet -d fonts -f doom -w 70 -c -k \"The End\"")
#+END_SRC


* Questions?

         [[file:pics/questions.png]]

* Local words
#  LocalWords:  adjoint functors monoids morphisms
